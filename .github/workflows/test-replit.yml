name: Test Replit Deployment

on:
  push:
    branches: [ replit-deployment ]
  pull_request:
    branches: [ replit-deployment ]
  workflow_dispatch:

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend tests
      env:
        REDIS_URL: redis://localhost:6379
        DATABASE_URL: sqlite:///./test.db
        JWT_SECRET_KEY: test-secret-key-for-ci
        ANTHROPIC_API_KEY: dummy-key-for-tests
        OPENAI_API_KEY: dummy-key-for-tests
        PINECONE_API_KEY: dummy-key-for-tests
      run: |
        cd backend
        # Create __init__.py files for proper imports
        touch __init__.py
        find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        # Run basic import test
        python -c "from main import app; print('Backend imports successful')"

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXT_PUBLIC_SOCKET_URL: ws://localhost:8000
        NEXTAUTH_SECRET: test-secret-key-for-ci
      run: |
        cd frontend
        npm run build
    
    - name: Check build output
      run: |
        cd frontend
        ls -la .next/
        echo "Frontend build successful"

  test-replit-scripts:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Test run.sh script syntax
      run: |
        # Check if run.sh is executable
        test -x run.sh || (echo "run.sh is not executable" && exit 1)
        # Check bash syntax
        bash -n run.sh
        echo "run.sh syntax is valid"
    
    - name: Test .replit configuration
      run: |
        # Validate .replit is valid TOML
        if command -v python3 &> /dev/null; then
          pip install toml
          python3 -c 'import toml; config = toml.load(open(".replit", "r")); print(".replit configuration is valid"); print("Entry point: " + str(config.get("run", "Not found")))'
        else
          echo "Python not available, skipping TOML validation"
        fi
    
    - name: Test replit.nix configuration
      run: |
        # Basic syntax check for Nix file
        if grep -q "pkgs" replit.nix && grep -q "deps" replit.nix; then
          echo "replit.nix appears to be valid"
        else
          echo "replit.nix may be missing required fields"
          exit 1
        fi

  simulate-replit-environment:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Simulate Replit environment variables
      run: |
        echo "REPL_SLUG=test-blackswan" >> $GITHUB_ENV
        echo "REPL_OWNER=github-actions" >> $GITHUB_ENV
        echo "DATABASE_URL=sqlite:///./test.db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Install Node dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Test backend startup
      env:
        JWT_SECRET_KEY: test-secret-key
        ANTHROPIC_API_KEY: dummy-key
        OPENAI_API_KEY: dummy-key
        PINECONE_API_KEY: dummy-key
      run: |
        cd backend
        timeout 30s python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        BACKEND_PID=$!
        sleep 10
        # Test health endpoint
        curl -f http://localhost:8000/health || (echo "Backend health check failed" && exit 1)
        kill $BACKEND_PID || true
        echo "Backend starts successfully"
    
    - name: Test frontend build with Replit URLs
      env:
        NEXT_PUBLIC_API_URL: https://test-blackswan.github-actions.repl.co:8000
        NEXT_PUBLIC_SOCKET_URL: wss://test-blackswan.github-actions.repl.co:8000
        NEXTAUTH_SECRET: test-secret-key
        NEXTAUTH_URL: https://test-blackswan.github-actions.repl.co
      run: |
        cd frontend
        npm run build
        echo "Frontend builds successfully with Replit URLs"